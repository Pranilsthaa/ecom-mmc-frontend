import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";
import { ThemeProvider } from "@/components/ThemeProvider";
import QClientProvider from "@/components/clientProvider";

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

const fetchAuthUser = async () => {
  const response = await fetch(`${process.env.NEXT_PUBLIC_API_URL}/auth/me`, {
    method: "POST",
    cache: "no-store",
  });
  if (response.status !== 200) {
    throw new Error("Failed to fetch user");
  }
  const data = await response.json();
  return data.user;
};

export default async function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  let user;
  try {
    user = await fetchAuthUser();
  } catch (err) {
    console.error("Failed to fetch user:", err);
  }

  return (
    <html lang="en">
      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased`}
      >
        <QClientProvider user={user}>
          <ThemeProvider>{children}</ThemeProvider>
        </QClientProvider>
      </body>
    </html>
  );
}
